use crate::state::{WeatherAlert, AlertType};
use crate::weather_api::{CurrentWeather, get_current_weather, get_forecast, ForecastResponse};
use uuid::Uuid;

pub struct AlertChecker;

impl AlertChecker {
    pub async fn check_alert(alert: &WeatherAlert) -> Result<bool, Box<dyn std::error::Error + Send + Sync>> {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        Self::check_forecast_alert(alert).await
    }
    
    pub async fn check_forecast_alert(alert: &WeatherAlert) -> Result<bool, Box<dyn std::error::Error + Send + Sync>> {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è (–º–∞–∫—Å–∏–º—É–º —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç API)
        let forecast = get_forecast(&alert.city, 3).await?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—Ä–µ–º—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ alert.hours_ahead
        Self::check_forecast_for_hours(&forecast, alert)
    }
    
    fn check_forecast_for_hours(forecast: &ForecastResponse, alert: &WeatherAlert) -> Result<bool, Box<dyn std::error::Error + Send + Sync>> {
        let target_hours = alert.hours_ahead as usize;
        
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        let days_ahead = if target_hours <= 24 { 0 } else if target_hours <= 48 { 1 } else { 2 };
        
        if let Some(forecast_day) = forecast.forecast.forecast_day.get(days_ahead) {
            match &alert.alert_type {
                AlertType::StandardWeatherAlert => {
                    Self::check_forecast_standard_conditions(forecast_day)
                }
                AlertType::TemperatureThreshold { min, max } => {
                    let min_temp = forecast_day.day.min_temp;
                    let max_temp = forecast_day.day.max_temp;
                    
                    let triggered = if let Some(min_threshold) = min {
                        min_temp < *min_threshold
                    } else {
                        false
                    } || if let Some(max_threshold) = max {
                        max_temp > *max_threshold
                    } else {
                        false
                    };
                    Ok(triggered)
                }
                AlertType::WindSpeed { max } => {
                    Ok(forecast_day.day.max_wind > *max)
                }
                AlertType::Humidity { min, max } => {
                    let avg_humidity = forecast_day.day.avg_humidity as u32;
                    let triggered = if let Some(min_hum) = min {
                        avg_humidity < *min_hum
                    } else {
                        false
                    } || if let Some(max_hum) = max {
                        avg_humidity > *max_hum
                    } else {
                        false
                    };
                    Ok(triggered)
                }
            }
        } else {
            Ok(false) // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞
        }
    }
    
    // –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    pub async fn check_current_alert(alert: &WeatherAlert) -> Result<bool, Box<dyn std::error::Error + Send + Sync>> {
        let weather = get_current_weather(&alert.city).await?;
        
        match &alert.alert_type {
            AlertType::StandardWeatherAlert => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                Self::check_standard_weather_conditions(&weather)
            }
            AlertType::TemperatureThreshold { min, max } => {
                let temp = weather.current.temperature;
                let triggered = if let Some(min_temp) = min {
                    temp < *min_temp
                } else {
                    false
                } || if let Some(max_temp) = max {
                    temp > *max_temp
                } else {
                    false
                };
                Ok(triggered)
            }
            AlertType::WindSpeed { max } => {
                Ok(weather.current.wind_speed > *max)
            }
            AlertType::Humidity { min, max } => {
                let humidity = weather.current.humidity;
                let triggered = if let Some(min_hum) = min {
                    humidity < *min_hum
                } else {
                    false
                } || if let Some(max_hum) = max {
                    humidity > *max_hum
                } else {
                    false
                };
                Ok(triggered)
            }
        }
    }
    
    fn check_forecast_standard_conditions(forecast_day: &crate::weather_api::ForecastDay) -> Result<bool, Box<dyn std::error::Error + Send + Sync>> {
        let condition_text = forecast_day.day.condition.text.to_lowercase();
        let min_temp = forecast_day.day.min_temp;
        let max_temp = forecast_day.day.max_temp;
        let max_wind = forecast_day.day.max_wind;
        
        // –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        let extreme_conditions = [
            "thunderstorm", "storm", "tornado", "hurricane", "cyclone",
            "blizzard", "hail", "snow", "ice", "freeze", "freezing",
            "extreme", "severe", "heavy", "violent", "dangerous"
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        let extreme_weather = extreme_conditions.iter()
            .any(|&condition| condition_text.contains(condition));
        
        let extreme_temperature = max_temp > 40.0 || min_temp < -20.0;
        let extreme_wind = max_wind > 50.0;
        
        Ok(extreme_weather || extreme_temperature || extreme_wind)
    }
    
    fn check_standard_weather_conditions(weather: &CurrentWeather) -> Result<bool, Box<dyn std::error::Error + Send + Sync>> {
        let condition_text = weather.current.condition.text.to_lowercase();
        let temp = weather.current.temperature;
        let wind_speed = weather.current.wind_speed;
        
        // –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        let extreme_conditions = [
            "thunderstorm", "storm", "tornado", "hurricane", "cyclone",
            "blizzard", "hail", "snow", "ice", "freeze", "freezing",
            "extreme", "severe", "heavy", "violent", "dangerous"
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        let extreme_weather = extreme_conditions.iter()
            .any(|&condition| condition_text.contains(condition));
        
        let extreme_temperature = temp > 40.0 || temp < -20.0;
        let extreme_wind = wind_speed > 50.0;
        
        Ok(extreme_weather || extreme_temperature || extreme_wind)
    }
    
    pub fn format_alert_message(alert: &WeatherAlert, weather: &CurrentWeather) -> String {
        let alert_type_str = match &alert.alert_type {
            AlertType::StandardWeatherAlert => "üö® –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
            AlertType::TemperatureThreshold { .. } => "üå°Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞",
            AlertType::WindSpeed { .. } => "üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä",
            AlertType::Humidity { .. } => "üíß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏",
        };
        
        format!(
            "‚ö†Ô∏è WEATHER ALERT ‚ö†Ô∏è\n\n{}\n\nüè† –ì–æ—Ä–æ–¥: {}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {}\n‚è∞ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞: {} —á–∞—Å–æ–≤\n\nüå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C\n‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {}\nüí® –í–µ—Ç–µ—Ä: {} –∫–º/—á\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {}%\n\nüïê –í—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {}",
            alert_type_str,
            weather.location.name,
            alert.description,
            alert.hours_ahead,
            weather.current.temperature,
            weather.current.condition.text,
            weather.current.wind_speed,
            weather.current.humidity,
            chrono::Utc::now().format("%Y-%m-%d %H:%M UTC")
        )
    }
}

pub fn generate_alert_id() -> String {
    Uuid::new_v4().to_string()
}

pub fn create_standard_alert(city: String, hours_ahead: u8) -> WeatherAlert {
    WeatherAlert::new(
        generate_alert_id(),
        city.clone(),
        AlertType::StandardWeatherAlert,
        format!("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {} (–∑–∞ {} —á.)", city, hours_ahead),
        hours_ahead
    )
}

pub fn create_temperature_alert(city: String, min: Option<f32>, max: Option<f32>, hours_ahead: u8) -> WeatherAlert {
    let description = match (min, max) {
        (Some(min_val), Some(max_val)) => format!("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {}¬∞C - {}¬∞C –≤ {} (–∑–∞ {} —á.)", min_val, max_val, city, hours_ahead),
        (Some(min_val), None) => format!("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ {}¬∞C –≤ {} (–∑–∞ {} —á.)", min_val, city, hours_ahead),
        (None, Some(max_val)) => format!("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ {}¬∞C –≤ {} (–∑–∞ {} —á.)", max_val, city, hours_ahead),
        (None, None) => format!("–ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ {} (–∑–∞ {} —á.)", city, hours_ahead),
    };
    
    WeatherAlert::new(
        generate_alert_id(),
        city,
        AlertType::TemperatureThreshold { min, max },
        description,
        hours_ahead
    )
}

pub fn create_wind_alert(city: String, max_speed: f32, hours_ahead: u8) -> WeatherAlert {
    WeatherAlert::new(
        generate_alert_id(),
        city.clone(),
        AlertType::WindSpeed { max: max_speed },
        format!("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤—ã—à–µ {} –∫–º/—á –≤ {} (–∑–∞ {} —á.)", max_speed, city, hours_ahead),
        hours_ahead
    )
}

pub fn create_humidity_alert(city: String, min: Option<u32>, max: Option<u32>, hours_ahead: u8) -> WeatherAlert {
    let description = match (min, max) {
        (Some(min_val), Some(max_val)) => format!("–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {}% - {}% –≤ {} (–∑–∞ {} —á.)", min_val, max_val, city, hours_ahead),
        (Some(min_val), None) => format!("–í–ª–∞–∂–Ω–æ—Å—Ç—å –Ω–∏–∂–µ {}% –≤ {} (–∑–∞ {} —á.)", min_val, city, hours_ahead),
        (None, Some(max_val)) => format!("–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤—ã—à–µ {}% –≤ {} (–∑–∞ {} —á.)", max_val, city, hours_ahead),
        (None, None) => format!("–ö–æ–Ω—Ç—Ä–æ–ª—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤ {} (–∑–∞ {} —á.)", city, hours_ahead),
    };
    
    WeatherAlert::new(
        generate_alert_id(),
        city,
        AlertType::Humidity { min, max },
        description,
        hours_ahead
    )
} 